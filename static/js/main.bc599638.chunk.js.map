{"version":3,"sources":["AQuitPlace.png","BridBox.png","Plus.png","GameOfThrone.png","EscapeRom.jpg","ToyStory.jpg","MovieName.js","MovieCard.js","MovieList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MovieName","value","onChange","className","type","event","target","id","MovieCard","Y","Card","name","starCount","rating","CardImg","top","height","src","image","alt","CardBody","CardTitle","title","MovieList","movies","onAddMovie","map","el","key","Plus","onClick","Math","random","prompt","Number","tablist","Logo","Logo1","Logo3","Logo4","logo5","App","props","state","titleFilter","minRating","nextValue","prevValue","this","setState","newMovie","concat","newtitleFilter","onStarClick","bind","filter","toLowerCase","includes","trim","addNewMovie","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc599638.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/AQuitPlace.8e06191e.png\";","module.exports = __webpack_public_path__ + \"static/media/BridBox.f7a9cddb.png\";","module.exports = __webpack_public_path__ + \"static/media/Plus.1475a81f.png\";","module.exports = __webpack_public_path__ + \"static/media/GameOfThrone.aee17703.png\";","module.exports = __webpack_public_path__ + \"static/media/EscapeRom.8a4bec41.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ToyStory.db9833bb.jpg\";","import React from 'react' ; \r\n\r\nconst MovieName =({value,onChange=()=>{}})=> {\r\n    return ( \r\n        <div>\r\n            <div className=\"header\">\r\n                \r\n                <input \r\n                   type=\"text\"   \r\n                   onChange={(event)=>onChange(event.target.value)}\r\n                   id=\"header-text\" \r\n                   value={value}/>\r\n                <button type=\"button\" id=\"header-search\" value=\"search\">Search</button>\r\n                    \r\n\r\n            </div>\r\n        </div>\r\n            \r\n            \r\n    \r\n     )\r\n}\r\n\r\n\r\nexport default MovieName;","import React from 'react';\r\nimport StarRatingComponent from 'react-star-rating-component';\r\nimport { Card, CardImg, CardBody,\r\n    CardTitle } from 'reactstrap';\r\n\r\n\r\n\r\n\r\n\r\nconst MovieCard = ({Y}) =>{\r\n    return(\r\n        \r\n            <Card className='col-3 card1'>\r\n                <div className=\" List\"> \r\n            <StarRatingComponent \r\n                name=\"rate1\" \r\n                starCount={5}\r\n                value={Y.rating}\r\n            />\r\n                <CardImg top height=\"300px\" src={Y.image} alt=\"Card image cap\" />\r\n                <CardBody>\r\n                <CardTitle>{Y.title}</CardTitle>\r\n                </CardBody>\r\n                </div>\r\n            </Card>\r\n        \r\n    )\r\n}\r\nexport default MovieCard;","import React from 'react';\r\nimport MovieCard from './MovieCard';\r\nimport Plus from './Plus.png';\r\n\r\n\r\n\r\n\r\n\r\nconst MovieList = ({movies=[],onAddMovie=()=>{}})=>{\r\n    return(\r\n    \r\n        <div className='card-list'>\r\n            <div className=\"row\">\r\n        \r\n        {movies.map(el=><MovieCard key={el.id} Y={el}/>)}\r\n        </div>\r\n        \r\n        \r\n\r\n        <div >\r\n        \r\n        <img src={Plus} className='prompt-button' onClick={() => {\r\n                onAddMovie({\r\n                    id:Math.random,\r\n                    title: prompt('movie title: '),\r\n                    rating: Number(prompt('movie rating: '))\r\n                   \r\n                    \r\n                })\r\n            }} type=\"button\" alt=\"image-prompt\"/>\r\n      </div>\r\n      </div>)\r\n        \r\n    \r\n}\r\n\r\nexport default MovieList;","import React, { Component } from 'react';\n\nimport './App.css';\nimport MovieName from './MovieName';\nimport Logo1  from './AQuitPlace.png';\n\nimport Logo from './BridBox.png';\nimport MovieList from './MovieList';\n\nimport Logo3 from './GameOfThrone.png';\nimport Logo4 from './EscapeRom.jpg';\nimport logo5 from './ToyStory.jpg';\nimport StarRatingComponent from 'react-star-rating-component';\nconst tablist = [{ id: 'inception', rating: '5', image: Logo , title: 'Brid Box - 2018 ' }, { id: 'inception', rating: '1', image: Logo1, title: ' A Quit Place' },\n{ id: 'inception', rating: '4', image: Logo3 , title: ' Game Of Throne - 2017 ' },\n { id: 'inception', rating: '4', image: Logo4 , title: ' Escape Rom - 2019 ' },\n  { id: 'inception', rating: '3', image: logo5 , title: ' Toy Story - 2019 ' }]\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movies: tablist,\n      titleFilter: '',\n      minRating: 2\n\n    }\n  }\n\n  onStarClick(nextValue, prevValue, name) {\n    this.setState({ minRating: nextValue });\n  }\n  addNewMovie(newMovie) {\n    this.setState({\n      movies: this.state.movies.concat(newMovie)\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <div className='row name-rating'>\n            <MovieName\n              onChange={(newtitleFilter) => this.setState({ titleFilter: newtitleFilter })}\n              value={this.state.titleFilter} />\n            <StarRatingComponent\n              name=\"rate1\"\n              starCount={5}\n              value={this.state.minRating}\n              onStarClick={this.onStarClick.bind(this)}\n            />\n          </div>\n\n          <MovieList movies={\n            this.state.movies.filter(\n              el => el.rating >= this.state.minRating && el.title.toLowerCase().includes(this.state.titleFilter.toLowerCase().trim()\n              )\n            )}\n            onAddMovie={(newMovie) => this.addNewMovie(newMovie)} />\n\n\n\n\n        </div>\n\n\n      </div>)\n  }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}